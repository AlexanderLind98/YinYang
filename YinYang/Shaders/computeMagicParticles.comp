// computemagicparticle.comp
#version 460

layout(local_size_x = 256) in;

struct Particle
{
    vec4 position; // xyz = position, w = lifetime
    vec4 velocity; // xyz = direction, w = unused
};

layout(std430, binding = 0) buffer Particles
{
    Particle particles[];
};

uniform float deltaTime;

const float upwardSpeed = 0.5;

float hash(float x)
{
    return fract(sin(x * 12.9898) * 43758.5453);
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    float seed = float(id);

    Particle p = particles[id];

    // Lifetime
    p.position.w -= deltaTime;

    if (p.position.w < 0.0)
    {
        // Spawn position in small circle around origin
        float angle = hash(seed) * (2 * 3.14159);
        float radius = hash(seed + 1.0) * 0.3;

        float x = cos(angle) * radius;
        float z = sin(angle) * radius;
        float y = 0.0;

        p.position.xyz = vec3(x, y, z);
        p.position.w = 3.0 + hash(seed + 2.0) * 2.0;

        // Straight upward motion
        p.velocity.xyz = vec3(0.0, upwardSpeed, 0.0);
    }

    // Move upward
    p.position.xyz += p.velocity.xyz * deltaTime;

    particles[id] = p;
}
